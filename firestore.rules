// Reem Resort Invoice System - Firestore Security Rules
// =====================================================
// 
// These rules implement comprehensive security for the invoice system
// with role-based access control, activity logging, and data protection.
//
// Security Levels:
// - Master Admin: System-only access (cannot login)
// - Admin: Full system access
// - User: Limited access to own data and basic functions
//
// Last Updated: 2024
// Version: 2.0.0

rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // =================================================================
    // HELPER FUNCTIONS
    // =================================================================
    
    // Check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Get user's role from custom claims or user document
    function getUserRole() {
      return request.auth.token.role;
    }
    
    // Check if user has specific role
    function hasRole(role) {
      return isAuthenticated() && getUserRole() == role;
    }
    
    // Check if user is admin (any admin level)
    function isAdmin() {
      return hasRole('admin') || hasRole('masterAdmin');
    }
    
    // Check if user is regular user
    function isUser() {
      return hasRole('user');
    }
    
    // Check if user owns the document (UID matches)
    function isOwner(docId) {
      return isAuthenticated() && request.auth.uid == docId;
    }
    
    // Check if user created the document
    function isCreator() {
      return isAuthenticated() && 
             resource.data.createdBy == request.auth.uid;
    }
    
    // Check if field is being modified
    function isFieldModified(field) {
      return field in request.resource.data && 
             field in resource.data && 
             request.resource.data[field] != resource.data[field];
    }
    
    // Validate required fields exist
    function hasRequiredFields(fields) {
      return fields.toSet().isSubset(request.resource.data.keys().toSet());
    }
    
    // Check if user has specific permission
    function hasPermission(permission) {
      return isAuthenticated() && 
             request.auth.token.permissions != null &&
             request.auth.token.permissions[permission] == true;
    }
    
    // =================================================================
    // SYSTEM COLLECTIONS (Admin Only)
    // =================================================================
    
    // System settings - Admin only read/write
    match /system/{document} {
      allow read: if isAdmin();
      allow write: if isAdmin() && 
                      hasRequiredFields(['updatedAt']) &&
                      request.resource.data.updatedAt == request.time;
    }
    
    // Roles configuration - Admin only read/write
    match /roles/{roleId} {
      allow read: if isAuthenticated(); // All users can read roles
      allow create, update: if isAdmin() && 
                               hasRequiredFields(['name', 'level', 'updatedAt']) &&
                               request.resource.data.updatedAt == request.time;
      allow delete: if isAdmin() && 
                       !resource.data.isSystemRole; // Cannot delete system roles
    }
    
    // =================================================================
    // USER MANAGEMENT
    // =================================================================
    
    // User profiles
    match /users/{userId} {
      // Read permissions
      allow read: if isOwner(userId) || // Own profile
                     isAdmin() || // Admins can read all
                     (isUser() && hasPermission('canViewUsers')); // Users with permission
      
      // Create permissions (Registration/Admin creation)
      allow create: if isAdmin() && // Only admins can create users
                       hasRequiredFields(['uid', 'email', 'name', 'role', 'createdAt', 'updatedAt']) &&
                       request.resource.data.uid == userId &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.updatedAt == request.time;
      
      // Update permissions
      allow update: if (isOwner(userId) && // Own profile (limited fields)
                        !isFieldModified('role') && 
                        !isFieldModified('permissions') &&
                        !isFieldModified('isActive') &&
                        request.resource.data.updatedAt == request.time) ||
                       (isAdmin() && // Admins can update all
                        request.resource.data.updatedAt == request.time);
      
      // Delete permissions (Admin only, cannot delete self)
      allow delete: if isAdmin() && userId != request.auth.uid;
    }
    
    // User sessions tracking
    match /sessions/{sessionId} {
      allow read, write: if isAuthenticated() && 
                            resource.data.userId == request.auth.uid;
      allow read: if isAdmin(); // Admins can monitor all sessions
    }
    
    // =================================================================
    // INVOICE MANAGEMENT
    // =================================================================
    
    // Invoices collection
    match /invoices/{invoiceId} {
      // Read permissions
      allow read: if isAuthenticated() && (
                     isAdmin() || // Admins can read all
                     hasPermission('canViewInvoices') || // Users with permission
                     resource.data.createdBy == request.auth.uid // Own invoices
                  );
      
      // Create permissions
      allow create: if isAuthenticated() && 
                       hasPermission('canCreateInvoices') &&
                       hasRequiredFields(['invoiceNumber', 'customerId', 'items', 'total', 'createdBy', 'createdAt']) &&
                       request.resource.data.createdBy == request.auth.uid &&
                       request.resource.data.createdAt == request.time &&
                       request.resource.data.status == 'draft';
      
      // Update permissions
      allow update: if isAuthenticated() && (
                       (hasPermission('canEditInvoices') && 
                        (isAdmin() || resource.data.createdBy == request.auth.uid)) ||
                       (isAdmin() && hasPermission('canEditAllInvoices'))
                    ) &&
                    request.resource.data.updatedAt == request.time &&
                    (!isFieldModified('createdBy')) && // Cannot change creator
                    (!isFieldModified('createdAt')); // Cannot change creation date
      
      // Delete permissions
      allow delete: if isAuthenticated() && 
                       hasPermission('canDeleteInvoices') &&
                       (isAdmin() || resource.data.createdBy == request.auth.uid) &&
                       resource.data.status != 'paid'; // Cannot delete paid invoices
    }
    
    // =================================================================
    // CUSTOMER MANAGEMENT
    // =================================================================
    
    // Customers collection
    match /customers/{customerId} {
      // Read permissions
      allow read: if isAuthenticated() && (
                     isAdmin() ||
                     hasPermission('canViewCustomers')
                  );
      
      // Create permissions
      allow create: if isAuthenticated() && 
                       hasPermission('canCreateCustomers') &&
                       hasRequiredFields(['name', 'email', 'createdBy', 'createdAt']) &&
                       request.resource.data.createdBy == request.auth.uid &&
                       request.resource.data.createdAt == request.time;
      
      // Update permissions
      allow update: if isAuthenticated() && 
                       hasPermission('canEditCustomers') &&
                       request.resource.data.updatedAt == request.time &&
                       (!isFieldModified('createdBy')) &&
                       (!isFieldModified('createdAt'));
      
      // Delete permissions
      allow delete: if isAdmin() && hasPermission('canDeleteCustomers');
    }
    
    // =================================================================
    // ROOM MANAGEMENT
    // =================================================================
    
    // Rooms collection
    match /rooms/{roomId} {
      // Read permissions
      allow read: if isAuthenticated() && (
                     isAdmin() ||
                     hasPermission('canViewRooms')
                  );
      
      // Write permissions (Admin only for room management)
      allow write: if isAdmin() && 
                      hasPermission('canManageRooms') &&
                      request.resource.data.updatedAt == request.time;
    }
    
    // Room types - authenticated users can read, only Admin can write
    match /roomTypes/{roomTypeId} {
      allow read: if isAuthenticated();
      allow write, create, delete: if isAdmin() && hasPermission('canManageRooms');
    }
    
    // =================================================================
    // ACTIVITY LOGGING & HISTORY
    // =================================================================
    
    // History/Activity logs
    match /history/{historyId} {
      // Read permissions
      allow read: if isAuthenticated() && (
                     isAdmin() || // Admins can read all history
                     (hasPermission('canViewHistory') && 
                      resource.data.userId == request.auth.uid) // Own history only
                  );
      
      // Create permissions (System/Service only)
      allow create: if isAuthenticated() && 
                       hasRequiredFields(['action', 'userId', 'timestamp']) &&
                       request.resource.data.userId == request.auth.uid &&
                       request.resource.data.timestamp == request.time;
      
      // No update/delete for history (immutable audit trail)
      allow update, delete: if false;
    }
    
    // Security events (Admin only)
    match /security/{eventId} {
      allow read: if isAdmin();
      allow create: if isAuthenticated(); // System can log security events
      allow update, delete: if false; // Immutable security log
    }
    
    // =================================================================
    // REPORTS & ANALYTICS
    // =================================================================
    
    // Reports collection
    match /reports/{reportId} {
      allow read: if isAuthenticated() && 
                     hasPermission('canViewReports');
      
      allow create: if isAuthenticated() && 
                       hasPermission('canGenerateReports') &&
                       hasRequiredFields(['type', 'createdBy', 'createdAt']) &&
                       request.resource.data.createdBy == request.auth.uid;
      
      allow update: if isAdmin() ||
                       (resource.data.createdBy == request.auth.uid);
      
      allow delete: if isAdmin() ||
                       (resource.data.createdBy == request.auth.uid &&
                        resource.data.status != 'published');
    }
    
    // =================================================================
    // FILE UPLOADS & ATTACHMENTS
    // =================================================================
    
    // File metadata
    match /files/{fileId} {
      allow read: if isAuthenticated() && (
                     isAdmin() ||
                     resource.data.uploadedBy == request.auth.uid ||
                     hasPermission('canViewFiles')
                  );
      
      allow create: if isAuthenticated() && 
                       hasRequiredFields(['filename', 'type', 'uploadedBy', 'createdAt']) &&
                       request.resource.data.uploadedBy == request.auth.uid &&
                       request.resource.data.createdAt == request.time;
      
      allow update: if isAdmin() ||
                       resource.data.uploadedBy == request.auth.uid;
      
      allow delete: if isAdmin() ||
                       resource.data.uploadedBy == request.auth.uid;
    }
    
    // =================================================================
    // BOOKINGS (Legacy Support)
    // =================================================================
    
    // Booking documents - authenticated users can manage bookings
    match /bookings/{bookingId} {
      allow read, write, create: if isAdmin();
      allow delete: if isAdmin();
    }
    
    // =================================================================
    // SETTINGS & PREFERENCES
    // =================================================================
    
    // User preferences
    match /preferences/{userId} {
      allow read, write: if isOwner(userId);
      allow read: if isAdmin(); // Admins can read preferences for support
    }
    
    // =================================================================
    // FALLBACK RULE
    // =================================================================
    
    // Deny all other access by default
    match /{document=**} {
      allow read, write: if false;
    }
  }
}

// =================================================================
// STORAGE RULES (for file uploads)
// =================================================================

/*
service firebase.storage {
  match /b/{bucket}/o {
    
    // User uploads (invoices, receipts, etc.)
    match /uploads/{userId}/{fileName} {
      allow read: if request.auth != null && (
                     request.auth.uid == userId ||
                     request.auth.token.role == 'admin'
                  );
      
      allow write: if request.auth != null && 
                      request.auth.uid == userId &&
                      resource.size < 5 * 1024 * 1024; // 5MB limit
    }
    
    // Public assets (logos, etc.)
    match /public/{fileName} {
      allow read: if true; // Public read access
      allow write: if request.auth != null && 
                      request.auth.token.role == 'admin';
    }
    
    // System files (Admin only)
    match /system/{fileName} {
      allow read, write: if request.auth != null && 
                            request.auth.token.role == 'admin';
    }
    
    // Deny all other access
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
*/